@mixin clearfix {
    &:before, &:after {
        content: '';
        display: table;
    } //before, after
    &:after {
        clear: both;
    } //after 
}

@mixin vertical-center {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin totally-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin vertical-center-child ($childClass) {
    position: relative;
    #{$childClass} {
        @include vertical-center;
    }
}

@mixin totally-center-child ($childClass) {
    position: relative;
    #{$childClass} {
        @include totally-center;
    }
}


@mixin aspect-ratio($contentClass, $width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > #{$contentClass} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}


@mixin responsive-map($property, $value-map, $breakpoint-map: $breakpoints) {
    @each $breakpoint, $value in $value-map {
        @if $breakpoint==null {
            #{$property}: $value;
        }
        @else {
            // if $value is a key that exists in $breakpoint-map, use the value
            @if map-has-key($breakpoint-map, $breakpoint) {
                $breakpoint: map-get($breakpoint-map, $breakpoint);
            }
            @media screen and (max-width: $breakpoint) {
                #{$property}: $value;
            }
        }
    }
}

@mixin responsive($property, $large-value, $ratio-map: $ratios, $breakpoint-map: $breakpoints) {
    $value-map: ();
    @each $breakpoint, $ratio in $ratio-map {
        $value-map: map-merge($value-map, ($breakpoint: $ratio*$large-value));
    }
    @include responsive-map($property, $value-map);
}

@mixin responsive-margin($mg-map, $mg-breakpoints: $breakpoints) {
    @include responsive-map(margin, $mg-map);
}

@mixin responsive-padding($pd-map, $pd-breakpoints: $breakpoints) {
    @include responsive-map(padding, $pd-map);
}

@mixin responsive-font-size($fs-map, $fs-breakpoints: $breakpoints) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint==null {
            @include make-font-size($fs-font-size);
        }
        @else {
            // If $fs-font-size is a key that exists in
            // $fs-breakpoints, use the value
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }
            @media screen and (max-width: $fs-breakpoint) {
                @include make-font-size($fs-font-size);
            }
        }
    }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
    // If $fs-font-size is a list, include
    // both font-size and line-height
    @if type-of($fs-font-size)=="list" {
        font-size: nth($fs-font-size, 1);
        @if (length($fs-font-size) > 1) {
            line-height: nth($fs-font-size, 2);
        }
    }
    @else {
        font-size: $fs-font-size;
    }
}
